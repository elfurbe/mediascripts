#!/usr/bin/env bash

usage() {
cat - <<EOF

Usage: ${0##*/} -i <INPUT FILE> -o <OUTPUT FILE>

-h|--help:      show this help message
-i|--input:     file name for input
-o|--output:    file name for output
--start:        start time for encode (default: unset)
--duration:     duration of encode (default: unset)
--crf:          crf value (default varies with input res, 2160:22, 1080:26, 720: 30, 480: 34)
--svt-preset:   SVT-AV1 preset value (default: 7)
--preset:       Alias for --svt-preset
--svt-params:   SVT-AV1 parameters string (default: unset)
--params:       Alias for --svt-params
--svt-tune:     SVT-AV1 tune value (default: 2)
--tune:         Alias for --svt-tune
--fast-decode   Use fast-decode (default: no)
--film-grain    denoise/synthetic grain tricks (bad for detail, good for bitrate, default 8)
--crop:         enable crop detection (default: no)
--debug:        output commands to be run, run nothing
--oprofile:     output profile [2160, 1080, 720, 480]
--vf:           custom videofilter input
--sdr:          best effort 2020->709 color fix
--yadif:        deinterlace with yadif 
--yadifmode:    set yadif to specific mode (default: 1, send frame per field)
--nnedi:        use the power of ai to deinterlace
--ivtc:         Inverse telecine, aka pullup (assumes NTSC DVD 29.97->23.976)
--pullup:       Alias for --ivtc
--fieldmatch:   Inverse telecine a different way using fieldmatch filter
--bitdepth:     Bitdepth for pixel format (8, 10 or 12, default: 10)
--audio:        transcode audio tracks to selected codec [flac, opus, aac]
--square:       convert anamorphic to square pixels which make sense
--forcelossy:   transcode all audio tracks to selected codec
--nopipe:       use ffmpeg native encoding instead of pipe

EOF
}

while [ $# -gt 0 ]; do
    OPT="$1"
    case "${OPT}" in
    -i|--input)
            shift
            INPUT="${1}"
            shift;;
    -o|--output)
            shift
            OUTPUT="${1}"
            shift;;
    --start)
            shift
            START="${1}"
            shift;;
    --duration)
            shift
            DURATION="${1}"
            shift;;
    --crf)
            shift
            CRF="${1}"
            shift;;
    --svt-preset|--preset)
            shift
            SVT_PRESET="${1}"
            shift;;
    --svt-params|--params)
            shift
            EXTRA_PARAMS="${1}"
            shift;;
    --svt-tune|--tune)
            shift
            SVT_TUNE="${1}"
            shift;;
    --fast-decode)
            if [ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null; then shift; FAST_DECODE=$1; else FAST_DECODE=2; fi
            shift;;
    --film-grain)
            if [ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null; then shift; FILM_GRAIN=$1; else FILM_GRAIN=8; fi
            shift;;
    --crop)
            CROP=1
            shift;;
    --debug)
            DEBUG=1
            shift;;
    --oprofile)
            shift
            OPROFILE="${1}"
            shift;;
    --vf)
            shift
            VIDEOFILTER="${1}"
            shift;;
    --sdr)
            SDR=1
            shift;;
    --yadif)
            YADIF=1
            shift;;
    --yadifmode)
            shift
            YADIFMODE="${1}"
            shift;;
    --nnedi)
            NNEDI=1
            shift;;
    --ivtc|--pullup)
            IVTC=1
            shift;;
    --fieldmatch)
            IVTC_FIELDMATCH=1
            shift;;
    --audio)
            shift
            AUDIO="${1}"
            shift;;
    --bitdepth)
            shift
            BITDEPTH="${1}"
            shift;;
    --square)
            SQUARE=1
            shift;;
    --forcelossy)
            FORCE_LOSSY=1
            shift;;
    --nopipe)
            NOPIPE=1
            shift;;
    -h|--help)
            usage
            exit;;
    *)
            echo "$0: invalid option ${1}"
            usage
            exit 1;;
    esac
done

# Check for tool dependencies
SELF_FULLPATH=`realpath $0`
SELF_DIR=`dirname $SELF_FULLPATH`
TOOLS=(ffmpeg ffprobe mkvpropedit mkvmerge mediainfo jq bc tr sed grep awk SvtAv1EncApp base64 column)
SCRIPTS=(striptags stripcovers addstats audiovise cropfinder)
if [ ! -r $SELF_DIR/toolchecker ]; then
    echo "toolchecker not found."
    exit 1
else
    . $SELF_DIR/toolchecker
fi

if [ $DEBUG ]; then
    echo " VARIABLE STATE:"
    echo "-----------------"
    for var in INPUT OUTPUT START DURATION CRF SVT_PRESET EXTRA_PARAMS SVT_TUNE FAST_DECODE FILM_GRAIN CROP DEBUG OPROFILE VIDEOFILTER SDR YADIF YADIFMODE NNEDI IVTC IVTC_FIELDMATCH AUDIO BITDEPTH SQUARE FORCE_LOSSY NOPIPE; do
        [ -n "${!var}" ] && echo "$var,${!var}" || echo "$var,<unset>"
    done | ${COLUMN} --separator , --table --table-name "VARIABLE STATE" --output-separator " | "
    echo
fi

if [ -z "$INPUT" ] || [ -z "$OUTPUT" ]; then
    echo "Insufficient options provided."
    echo "Must supply input (-i/--input) and output (-o/--output) at minimum"
    usage
    exit 1
fi

if [ ! -s "$INPUT" ] && [[ "$INPUT" != *"%"* ]]; then
    echo "Error reading input file: $INPUT"
    exit 1
fi

if [ -f "$OUTPUT" ]; then
    echo "Output file exists."
    exit 1
fi

INPUT_WIDTH=`$MEDIAINFO --Output=JSON "${INPUT}" | $JQ -r '.media.track[] | select(."@type" == "Video" ).Width'`
INPUT_HEIGHT=`$MEDIAINFO --Output=JSON "${INPUT}" | $JQ -r '.media.track[] | select(."@type" == "Video" ).Height'`

if [ $SQUARE ]; then
    VF="scale=iw*sar:ih,setsar=1:1"
fi

if [ ! -z "$OPROFILE" ]; then
    case "${OPROFILE}" in
        2160)
            VF="${VF:+${VF},}scale=3840:-1"
            OP_CRF=22;;
        1080)
            VF="${VF:+${VF},}scale=1920:-1"
            OP_CRF=26;;
        900)
            VF="${VF:+${VF},}scale=1600:-1"
            OP_CRF=28;;
        810)
            VF="${VF:+${VF},}scale=1440:-1"
            OP_CRF=30;;
        720)
            VF="${VF:+${VF},}scale=1280:-1"
            OP_CRF=30;;
        480)
            VF="${VF:+${VF},}scale=720:-1"
            OP_CRF=34;;
        1440)
            VF="${VF:+${VF},}scale=-1:1080,crop=1440:1080:240:0"
            OP_CRF=26;;
        960)
            VF="${VF:+${VF},}scale=-1:720,crop=960:720:160:0"
            OP_CRF=30;;
        *)
            echo "Not a recognized output profile name."
            exit 1;;
    esac
    if [ -z "$CRF" ]; then
        CRF=$OP_CRF
    fi
elif [ -z "$CRF" -a -z "$OPROFILE" ]; then
    if [ "$INPUT_WIDTH" -gt 1920 ]; then
        CRF=22
    elif [ "$INPUT_WIDTH" -gt 1280 ]; then
        CRF=26
    elif [ "$INPUT_WIDTH" -gt 854 ]; then
        CRF=30
    else
        CRF=34
    fi
fi


BITDEPTH=${BITDEPTH:=10}
case "${BITDEPTH}" in
    12)
        PIXEL_FORMAT="yuv420p12le";;
    10)
        PIXEL_FORMAT="yuv420p10le";;
    8)
        PIXEL_FORMAT="yuv420p";;
    *)
        echo "Bitdepth ${BITDEPTH} is invalid."
        exit 1;;
esac

VIDEO_TRACKS=`$MEDIAINFO --output=JSON "$INPUT" | $JQ -r '.media.track[] | select (."@type"=="Video") | @base64'`
IFS=$'\n'
for TRACK in ${VIDEO_TRACKS}; do
    TRACK_HDR_FORMAT=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.HDR_Format'`
    if [[ "$TRACK_HDR_FORMAT" != "null" ]]; then
        [ $DEBUG ] && echo "HDR format video detected: $TRACK_HDR_FORMAT"
        [[ "$TRACK_HDR_FORMAT" =~ Dolby ]] && [ $DEBUG ] && echo "Dolby Vision detected."
        if [ $SDR ]; then
            NPL=100
            METHOD="mobius"
            DESAT=4
            RANGE="limited"
            TONEMAP="zscale=t=linear:npl=${NPL},format=gbrpf32le,tonemap=${METHOD}:param=0.4:desat=${DESAT},zscale=p=bt709:t=bt709:m=bt709:r=${RANGE}"
            VF="${TONEMAP}${VF:+,${VF}}"
        else
            paramsmunge "enable-hdr=1"
            COPY_HDR=1
        fi
    fi
done
IFS="$O_IFS"

if [ $CROP ]; then
    echo "## Finding crop..."
    SEGMENTS=10
    CFOUTPUT=$($CROPFINDER -i "$INPUT" -s $SEGMENTS -d)

    [ $DEBUG ] && echo "$CFOUTPUT"
    CROP=$(echo "$CFOUTPUT" | tail -n1)
    [ $DEBUG ] && echo "INPUT_WIDTH: ${INPUT_WIDTH}"
    [ $DEBUG ] && echo "INPUT_HEIGHT: ${INPUT_HEIGHT}"
    IFS=':' read width height left top <<< "$(echo "$CROP" | ${AWK} -F= '{print $2}')"
    if [ $INPUT_WIDTH -eq $width ] && [ $INPUT_HEIGHT -eq $height ]; then
        echo "## No crop detected"
    else
        if [ $height -eq 1072 ] && [ $INPUT_HEIGHT -ne 1072 ]; then 
            [ $DEBUG ] && echo "The dumb eight pixel height crop, ignoring"
            height=$INPUT_HEIGHT
            top=0
            CROP="crop=$width:$height:$left:$top"
        fi
        if [ $width -eq 1904 ] && [ $INPUT_WIDTH -ne 1904 ]; then 
            [ $DEBUG ] && echo "The dumb sixteen pixel width crop, ignoring"
            width=$INPUT_WIDTH
            left=0
            CROP="crop=$width:$height:$left:$top"
        fi
        if [ $width -ne $INPUT_WIDTH ] && [ $height -ne $INPUT_HEIGHT ]; then
            [ $DEBUG ] && echo "Crop detected in both dimensions, that's not great"
            if [ $left -gt $top ]; then
                [ $DEBUG ] && echo "Maintaining input height ($INPUT_HEIGHT)"
                if [ $(( $height + 2 * $top )) -ne $INPUT_HEIGHT ]; then
                    GUTTERS=$(( ($INPUT_HEIGHT - $height) / 2 ))
                    PAD="pad=$width:$INPUT_HEIGHT:0:$GUTTERS"
                    CROP="$CROP,$PAD"
                    [ $DEBUG ] && echo "Evenly padding crop height ($height) back to input height ($INPUT_HEIGHT) with gutters ($GUTTERS)"
                else
                    width=$INPUT_WIDTH
                    CROP="crop=$width:$INPUT_HEIGHT:$left:0"
                    [ $DEBUG ] && echo "Using original input height ($INPUT_HEIGHT)"
                fi
            elif [ $top -gt $left ]; then
                [ $DEBUG ] && echo "Maintaining input width ($INPUT_WIDTH)"
                if [ $(( $width + 2 * $left )) -ne $INPUT_WIDTH ]; then
                    GUTTERS=$(( ($INPUT_WIDTH - $width) / 2 ))
                    PAD="pad=$INPUT_WIDTH:$height:$GUTTERS:$top"
                    CROP="$CROP,$PAD"
                    [ $DEBUG ] && echo "Evenly padding crop width ($width) back to input width ($INPUT_WIDTH) with gutters ($GUTTERS)"
                else
                    width=$INPUT_WIDTH
                    CROP="crop=$INPUT_WIDTH:$height:0:$top"
                    [ $DEBUG ] && echo "Using original input width ($INPUT_WIDTH)"
                fi
            else
                echo "## Ran out of cropping ideas. Look at this crop with your eyes, type it in with your hands."
                echo "## This is what cropfinder delivered: ${CROP}"
                exit 1
            fi
        fi
        if [ $INPUT_WIDTH -eq $width ] && [ $INPUT_HEIGHT -eq $height ]; then
            echo "## After much consideration, no crop required"
        else
            echo "## ${CROP}"
            VF="${CROP}${VF:+,${VF}}"
        fi
    fi
fi

if [ $AUDIO ]; then        
    NL=$'\n'
    AUDIO_TRACK_META=""
    AUDIO_TRACKS=`$MEDIAINFO --output=JSON "$INPUT" | $JQ -r '.media.track[] | select (."@type"=="Audio") | @base64'`
    IFS=$'\n'
    for TRACK in ${AUDIO_TRACKS}; do
        TRACK_NUMBER=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.StreamOrder'`
        [ ${TRACK_NUMBER} -eq 0 ] && TRACK_NUMBER=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.ID'`
        TRACK_CODEC=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.CodecID'`
        TRACK_BITRATE=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.BitRate'`
        TRACK_LAYOUT=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.ChannelLayout'`
        [ "${TRACK_LAYOUT}" == null ] && TRACK_LAYOUT=`echo "${TRACK}" | ${BASE64} --decode | ${JQ} -r '.ChannelLayout_Original'`
        TRACK_CHANNELS=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.Channels'`
        TRACK_CHANNELS_ORIGINAL=`echo "${TRACK}" | ${BASE64} --decode | ${JQ} -r '.Channels_Original'`
        [ "${TRACK_CHANNELS_ORIGINAL}" != null ] && TRACK_CHANNELS=${TRACK_CHANNELS_ORIGINAL}
        TRACK_COMPMODE=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.Compression_Mode'`
        TRACK_FORMAT=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.Format'`
        TRACK_FORMAT_COMMERCIAL_IFANY=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.Format_Commercial_IfAny'`
        if [[ "$TRACK_FORMAT_COMMERCIAL_IFANY" =~ Atmos|DTS:X ]] || [[ "$TRACK_LAYOUT" =~ Objects ]]; then
            TRACK_OBJFORMAT=1
        else
            TRACK_OBJFORMAT=0
        fi
        if [ "$TRACK_LAYOUT" = "null" ] && [ "$TRACK_CHANNELS" = "null" ]; then
            TRACK_LAYOUT=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.ChannelLayout_Original'`
            TRACK_CHANNELS=`echo "${TRACK}" | ${BASE64} --decode | $JQ -r '.Channels_Original'`
        fi
        TRACK_META="${TRACK_NUMBER},${TRACK_CODEC},${TRACK_BITRATE},${TRACK_CHANNELS},${TRACK_LAYOUT},${TRACK_FORMAT},${TRACK_COMPMODE},${TRACK_OBJFORMAT}${NL}"
        AUDIO_TRACK_META="${AUDIO_TRACK_META}${TRACK_META}"
    done
    IFS="$O_IFS"
    AUDIO_TRACK_META=`echo "$AUDIO_TRACK_META" | sed 's/^$//g'`
    if [ $DEBUG ]; then
        echo
        echo "Input Audio Tracks"
        echo "------------------"
        echo "Track,Codec,BitRate,Channels,Layout,Format,CompMode,ObjFormat${NL}${AUDIO_TRACK_META}" | column -t -s, -o " | "
        echo
    fi

    case "${AUDIO}" in
        flac)
            while read -r i; do
                IFS=, read -r TRACK_NUMBER TRACK_CODEC TRACK_BITRATE TRACK_CHANNELS TRACK_LAYOUT TRACK_FORMAT TRACK_COMPMODE<<< $( echo "$i" )
                if [[ $FORCE_LOSSY ]] || [[ "$TRACK_COMPMODE" =~ "Lossless" ]] || [[ "$TRACK_FORMAT" =~ "PCM" ]] && [[ "$TRACK_FORMAT" != "FLAC" ]]; then
                    FLAC_FLAGS="-c:a:${TRACK_NUMBER} flac $FLAC_FLAGS"
                    OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},flac,${TRACK_BITRATE},${TRACK_LAYOUT},n/a${NL}"
                else
                    FLAC_FLAGS="-c:a:${TRACK_NUMBER} copy $FLAC_FLAGS"
                    OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},copy,${TRACK_BITRATE},${TRACK_LAYOUT},n/a${NL}"
                fi
            done < <(echo "$AUDIO_TRACK_META")
            echo "Output Audio Tracks"
            echo "------------------"
            echo "Track,Codec,BitRate,Channels,Layout${NL}${OUTPUT_TRACK_META}" | column -t -s, -o " | "
            echo
            unset IFS
            AUDIO_FLAGS="$AUDIO_FLAGS ${FLAC_FLAGS:0:-1}";;
        opus)
            while read -r i; do
                IFS=, read -r TRACK_NUMBER TRACK_CODEC TRACK_BITRATE TRACK_CHANNELS TRACK_LAYOUT TRACK_FORMAT TRACK_COMPMODE TRACK_OBJFORMAT<<< $( echo "$i" )
                TRACK_NUMBER=`echo "$TRACK_NUMBER - 1" | ${BC}`
                if ([[ $FORCE_LOSSY ]] || [[ "$TRACK_COMPMODE" =~ "Lossless" ]] || [[ "$TRACK_FORMAT" =~ "PCM" ]]) && [ $TRACK_OBJFORMAT -eq 0 ]; then
                    BR=$(echo "$TRACK_LAYOUT" | ${SED} -e 's~Rss\|Lss\|Rsr\|Lsr\|Rb\|Lb\|Rs\|Ls\|Rw\|Lw\|LFE~64~g' -e 's~Cb\|C\|Cs\|M\|L\|Lt\|R\|Rt~128~g' | ${TR} -s ' ' '+' | ${BC})
                    if [ $BR -eq 0 ]; then
                        case $TRACK_CHANNELS in
                            8|7) BR=704;;
                            6|5) BR=576;;
                            4) BR=512;;
                            3) BR=384;;
                            2) BR=256;;
                            1) BR=128;;
                            *) BR=576;;
                        esac
                    fi
                    TRACK_BITRATE="${BR}k"
                    #TRACK_FLAGS="-ab:${TRACK_NUMBER} ${TRACK_BITRATE} -metadata:${TRACK_NUMBER} title=\"Opus from ${TRACK_CODEC}\" "
                    TRACK_FLAGS="-c:a:${TRACK_NUMBER} libopus -filter:a:${TRACK_NUMBER} aformat=channel_layouts='7.1|5.1|stereo|mono' -b:a:${TRACK_NUMBER} ${TRACK_BITRATE} "
                    OPUS_FLAGS="${OPUS_FLAGS}${TRACK_FLAGS}"
                    OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},opus,${TRACK_BITRATE},${TRACK_CHANNELS},${TRACK_LAYOUT}${NL}"
                else
                    OPUS_FLAGS="-c:a:${TRACK_NUMBER} copy $OPUS_FLAGS"
                    OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},copy,${TRACK_BITRATE},${TRACK_CHANNELS},${TRACK_LAYOUT}${NL}"
                fi
            done < <(echo "$AUDIO_TRACK_META")
            echo "Output Audio Tracks"
            echo "------------------"
            echo "Track,Codec,BitRate,Channels,Layout${NL}${OUTPUT_TRACK_META}" | column -t -s, -o " | "
            echo
            unset IFS
            AUDIO_FLAGS="$AUDIO_FLAGS ${OPUS_FLAGS:0:-1}"
            ;;
        aac)
            while read -r i; do
                IFS=, read -r TRACK_NUMBER TRACK_CODEC TRACK_BITRATE TRACK_CHANNELS TRACK_LAYOUT TRACK_FORMAT TRACK_COMPMODE TRACK_OBJFORMAT<<< $( echo "$i" )
                TRACK_NUMBER=`echo "$TRACK_NUMBER - 1" | ${BC}`
                if ([[ $FORCE_LOSSY ]] || [[ "$TRACK_COMPMODE" =~ "Lossless" ]] || [[ "$TRACK_FORMAT" =~ "PCM" ]]) && [ $TRACK_OBJFORMAT -eq 0 ]; then
                    BR=$(echo "$TRACK_LAYOUT" | ${SED} -e 's~Rss\|Lss\|Rsr\|Lsr\|Rb\|Lb\|Rs\|Ls\|Rw\|Lw\|LFE~64~g' -e 's~Cb\|C\|Cs\|M\|L\|Lt\|R\|Rt~128~g' | ${TR} -s ' ' '+' | ${BC})
                    if [ $BR -eq 0 ]; then
                        BR=576
                    fi
                    TRACK_BITRATE="${BR}k"
                    #TRACK_FLAGS="-ab:${TRACK_NUMBER} ${TRACK_BITRATE} -metadata:${TRACK_NUMBER} title=\"Opus from ${TRACK_CODEC}\" "
                    TRACK_FLAGS="-c:a:${TRACK_NUMBER} libfdk_aac -b:a:${TRACK_NUMBER} ${TRACK_BITRATE} "
                    AAC_FLAGS="${AAC_FLAGS}${TRACK_FLAGS}"
                    OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},aac,${TRACK_BITRATE},${TRACK_CHANNELS},${TRACK_LAYOUT}${NL}"
                else
                    AAC_FLAGS="-c:a:${TRACK_NUMBER} copy $AAC_FLAGS"
                    OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},copy,${TRACK_BITRATE},${TRACK_CHANNELS},${TRACK_LAYOUT}${NL}"
                fi
            done < <(echo "$AUDIO_TRACK_META")
            echo "Output Audio Tracks"
            echo "------------------"
            echo "Track,Codec,BitRate,Channels,Layout${NL}${OUTPUT_TRACK_META}" | column -t -s, -o " | "
            echo
            unset IFS
            AUDIO_FLAGS="$AUDIO_FLAGS ${AAC_FLAGS:0:-1}"
            ;;
        *)
            echo "Unknown codec: ${AUDIO}"
            exit 1;;
    esac

else
    AUDIO_FLAGS="-c:a copy"
fi

## test for the PSY fork of SVT-AV1
CHECK_SVTAV1_VERSION=$(${SVTAV1ENCAPP} --version | grep PSY &>/dev/null && echo "PSY")
[ $DEBUG ] && echo "SVTAV1_VERSION: ${CHECK_SVTAV1_VERSION}"

## SET GOP SIZE
## ~10x frame rate, not more than 300, 240 is probably fine for everything?
G=240

if [ -n "${FAST_DECODE}" ] && [ "${FAST_DECODE}" -eq "${FAST_DECODE}" ]; then
    # There are technically two fast-decode modes, 1 and 2. 2 is newer, more meaningful decode improvement, MAYBE more visual tradeoffs.
    # I tested them both and 2 makes a much bigger difference at decode time but seems to have no meaningful downside I could measure
    paramsmunge "fast-decode=2" after
    # fast-decode recommends tune 1 so we're forcing tune 1
    SVT_TUNE=1
elif [ -n "${FAST_DECODE}" ] && [ ! "${FAST_DECODE}" -eq "${FAST_DECODE}" ]; then
    echo "fast-decode value is not recognized: ${FAST_DECODE}"
    exit 1
fi

[ -z "$SVT_PRESET" ] && SVT_PRESET=7

if [ -z "$SVT_TUNE" ]; then
    if [ "${CHECK_SVTAV1_VERSION}" == "PSY" ]; then
        # SVT-AV1-PSY has a third tune option aimed at subjective visual quality at the expense of metrics performance
        # It's experimental but they consider it better so we'll use it if you're using the PSY branch
        [ $DEBUG ] && echo "SVT-AV1-PSY detected. Using Subjective SSIM tune."
        SVT_TUNE=3
    else
        # For vanilla SVT-AV1 we'll use tune 2 cause the nerdgods say so
        # ref: https://wiki.x266.mov/docs/encoders/SVT-AV1#encoder-optimization
        SVT_TUNE=2
    fi
fi

if [ -n "${FILM_GRAIN}" ] && [ "${FILM_GRAIN}" -eq "${FILM_GRAIN}" ]; then
    # technically you can do film grain without denoise but I cannot find a definite answer on whether there's any point in doing so
    # if it doesn't denoise the input frames, you're not getting any of the bitrate value of doing this, but you're still paying
    # the compute-time penalty to analyze the frame for grain characteristics, so I don't know why you'd do one without the other
    # ergo if you ask for film-grain you're getting film-grain-denoise also. If you _KNOW_ why you would want to do
    # film-grain *without* film-grain-denoise you should file an issue and explain it to babby and maybe I'll implement the option
    paramsmunge "film-grain=${FILM_GRAIN}:film-grain-denoise=1" after
    # I _think_ the PSY encoder enables this automatically but I'm not positive
    [ "${CHECK_SVTAV1_VERSION}" == "PSY" ] && paramsmunge "adaptive-film-grain=1" after
    if [ ${SVT_PRESET} -gt 6 ]; then
        echo "Using film-grain synthesis at presets numerically higher than 6 is not recommended, setting preset 6"
        SVT_PRESET=6
    fi
fi

#paramsmunge "tune=${SVT_TUNE}:enable-variance-boost=1:enable-qm=1:qm-min=0:irefresh-type=2:keyint=${G}"
paramsmunge "tune=${SVT_TUNE}:enable-variance-boost=1:enable-qm=1:qm-min=0" after
[ "${CHECK_SVTAV1_VERSION}" == "PSY" ] && paramsmunge "enable-dlf=2" after

if [ $COPY_HDR ]; then
    ## REFERENCES
    # https://codecalamity.com/encoding-uhd-4k-hdr10-videos-with-ffmpeg/
    ## THIS IS A DANK ASS TRICK THAT MAKES VARIABLES OUT OF ALL THE VIDEO METADATA
    eval "$($FFPROBE -analyzeduration 100 -probesize 100M -hide_banner -loglevel warning -select_streams v -print_format json -show_frames -read_intervals "%+#1" -show_entries "frame=hdr_format,color_range,color_space,color_primaries,color_transfer,side_data_list,pix_fmt" -i "${INPUT}" | ${GREP} -v -e frames -e '{' -e '\[' -e '}' -e '\]' -e 'side' | ${SED} -e 's/^\ *//g' -e 's/^"//g' -e 's/\":/:/g' -e 's/^\(.*\)\ \(.*\):/\1_\2:/g' -e 's/:\ /=/g' -e 's/,//g' -e 's/\(.*\)"\(.*\)\ \(.*\)":/\1"\2_\3":/g' -e 's/^/video_/g' -e 's/^.*=/\U&/g')"

    VIDEO_COLOR_SPACE_FIXED="${VIDEO_COLOR_SPACE/nc/-ncl}"

    ## Processing up the variables from ffprobe fractions to floats
    VIDEO_GREEN_X_BC=$(echo "scale=4;$VIDEO_GREEN_X" | ${BC})
    VIDEO_GREEN_Y_BC=$(echo "scale=4;$VIDEO_GREEN_Y" | ${BC})
    VIDEO_BLUE_X_BC=$(echo "scale=4;$VIDEO_BLUE_X" | ${BC})
    VIDEO_BLUE_Y_BC=$(echo "scale=4;$VIDEO_BLUE_Y" | ${BC})
    VIDEO_RED_X_BC=$(echo "scale=4;$VIDEO_RED_X" | ${BC})
    VIDEO_RED_Y_BC=$(echo "scale=4;$VIDEO_RED_Y" | ${BC})
    VIDEO_WHITE_POINT_X_BC=$(echo "scale=4;$VIDEO_WHITE_POINT_X" | ${BC})
    VIDEO_WHITE_POINT_Y_BC=$(echo "scale=4;$VIDEO_WHITE_POINT_Y" | ${BC})
    VIDEO_MAX_LUMINANCE_BC=$(echo "scale=4;$VIDEO_MAX_LUMINANCE" | ${BC})
    VIDEO_MIN_LUMINANCE_BC=$(echo "scale=4;$VIDEO_MIN_LUMINANCE" | ${BC})

    paramsmunge "color-primaries=${VIDEO_COLOR_PRIMARIES}"
    paramsmunge "transfer-characteristics=${VIDEO_COLOR_TRANSFER}"
    paramsmunge "matrix-coefficients=${VIDEO_COLOR_SPACE_FIXED}"
    #
    ## parameters specific to color transfers
    case "${VIDEO_COLOR_TRANSFER}" in
        smpte2084)
            echo ">> HDR10/SMPTE2084 color transfer"
            GREEN="${VIDEO_GREEN_X_BC},${VIDEO_GREEN_Y_BC}"
            BLUE="${VIDEO_BLUE_X_BC},${VIDEO_BLUE_Y_BC}"
            RED="${VIDEO_RED_X_BC},${VIDEO_RED_Y_BC}"
            WHITE_POINT="${VIDEO_WHITE_POINT_X_BC},${VIDEO_WHITE_POINT_Y_BC}"
            LUMINANCE="${VIDEO_MAX_LUMINANCE_BC},${VIDEO_MIN_LUMINANCE_BC}"
            CLL="${VIDEO_MAX_CONTENT},${VIDEO_MAX_AVERAGE}"
            paramsmunge "mastering-display=G(${GREEN})B(${BLUE})R(${RED})WP(${WHITE_POINT})L(${LUMINANCE}):content-light=${CLL}";;
        arib-std-b67)
            echo ">> HLG/ARIB-STD-B67 color transfer";;
        *)
            echo "Unrecognized color transfer: ${VIDEO_COLOR_TRANSFER}"
            echo "Bailing out."
            exit 1;;
    esac
fi

if [ ! -z "$EXTRA_PARAMS" ]; then
    paramsmunge "${EXTRA_PARAMS}" after
fi

VIDEO="-c:V libsvtav1 -pix_fmt ${PIXEL_FORMAT} -preset ${SVT_PRESET} -g ${G} -crf ${CRF} -svtav1-params ${PARAMS}"

MAPS="-map 0 -map -0:d"
TRAILERS="-c:s copy -max_muxing_queue_size 9999"

ENCODE_FLAGS="${MAPS} ${VIDEO} ${AUDIO_FLAGS} ${TRAILERS}"

if [[ "$TRACK_HDR_FORMAT" =~ Dolby ]]; then
    ENCODE_FLAGS="${ENCODE_FLAGS} -dolbyvision 1"
fi

if [ ! -z "$DURATION" ]; then
    ENCODE_FLAGS="$ENCODE_FLAGS -t $DURATION"
fi

if [ ! -z "$START" ]; then
    FFMPEG="$FFMPEG -ss $START"
fi

SCANTYPE=`$MEDIAINFO "$INPUT" | grep "Scan type " | awk -F:\  '{print $2}'`
SCANORDER=`$MEDIAINFO "$INPUT" | grep "Scan order " | awk -F:\  '{print $2}'`
DEINT_SUM=$(( ${YADIF:-0} + ${NNEDI:-0} ))
if [ $DEINT_SUM -gt 1 ]; then
    echo "Pick one deinterlace option, not more than one."
    exit 1
elif [ $(( ${DEINT_SUM:-0} + ${IVTC:-0} + ${IVTC_FIELDMATCH:-0} )) -gt 1 ]; then
    echo "Don't deinterlace and also detelecine, that's bad."
    exit 1
elif [ $YADIFMODE ] && [ -z "$YADIF" ]; then
    echo "Don't set yadifmode if you're not using yadif."
    exit 1
elif [ $YADIF ]; then
    YADIFMODE=${YADIFMODE:=1}
    if [ "$SCANTYPE" = "Interlaced" ] || [ "$SCANTYPE" = "MBAFF" ] || [ "$SCANTYPE" = "PAFF" ]; then
        if [ "$SCANORDER" = "Top Field First" ]; then
            VF="yadif=${YADIFMODE}:0:0${VF:+,${VF}}"
        else
            VF="yadif=${YADIFMODE}:1:0${VF:+,${VF}}"
        fi
    else
        if [ $DEBUG ]; then
            echo "Input video is not interlaced, skipping deint"
        fi
    fi
elif [ $NNEDI ]; then
    ## This lets me send this path in with an environment variable, but otherwise, welp
    [ -n "${NNEDI_WEIGHTS}" ] || NNEDI_WEIGHTS=${FFMPEG_PREFIX}/etc/nnedi3_weights.bin
    NN_DEINT="all"
    FIELD="af"
    PLANES="7"
    NSIZE="s48x6"
    NNS="n64"
    QUAL="slow"
    ETYPE="a"
    PSCRN="new3"
    THREADS=16
    VF="nnedi=$NNEDI_WEIGHTS:deint=$NN_DEINT:field=$FIELD:planes=$PLANES:nsize=$NSIZE:nns=$NNS:qual=$QUAL:etype=$ETYPE:pscrn=${PSCRN}:threads=${THREADS}${VF:+,${VF}}"
fi

if [ $(( ${IVTC:-0} + ${IVTC_FIELDMATCH:-0} )) -gt 1 ]; then
    echo "Can't do both kinds of detelecine at the same time, friend."
    exit 1
elif [ $IVTC ]; then
    VF="pullup,dejudder${VF:+,${VF}} -r 24000/1001"
elif [ $IVTC_FIELDMATCH ]; then
    if [ "$SCANORDER" = "Top Field First" ]; then
        VF="fieldmatch=order=tff:combmatch=full,yadif=deint=interlaced,decimate${VF:+,${VF}}"
    else
        VF="fieldmatch=order=bff:combmatch=full,yadif=deint=interlaced,decimate${VF:+,${VF}}"
    fi
fi

if [ ! -z "$VIDEOFILTER" ]; then
    VF="$VIDEOFILTER${VF:+,${VF}}"
fi

if [ ! -z "$VF" ]; then
    ENCODE_FLAGS="$ENCODE_FLAGS -filter:v $VF"
fi

if [ $DEBUG ]; then
    echo "COMMANDS:"
    echo "$STRIPCOVERS \"${INPUT}\""
    if [ $NOPIPE ]; then
        echo "nice -n 5 $FFMPEG -i \"$INPUT\" $ENCODE_FLAGS \"$OUTPUT\""
    else
        SWITCHES=$(echo "--${PARAMS}" | sed -e 's/:/\ --/g' -e 's/=/\ /g')
        SWITCHES="--crf ${CRF} --preset ${SVT_PRESET} --progress 3 --irefresh-type 2 -i stdin --input-depth 10 --keyint ${G} ${SWITCHES}"
        echo "nice -n 5 ${FFMPEG} -hide_banner -loglevel error -i \"${INPUT}\" -map 0:v:0 -pix_fmt yuv420p10le ${VF:+-filter:v ${VF}} -f yuv4mpegpipe -strict -1 - | nice -n 5 ${SVTAV1ENCAPP} ${SWITCHES} --output ${OUTPUT%.mkv}.ivf"
    fi
    echo "$STRIPTAGS \"${OUTPUT}\""
    echo "$ADDSTATS \"${OUTPUT}\""
    #exit
    read -p "Press y to encode, any other key to exit..." confirm
    case $confirm in
        [Yy] ) true;;
        * ) exit;;
    esac
fi

if [[ "${INPUT##*.}" == "mkv" ]]; then
    echo "## Stripping covers from input file..."
    set -x
    $STRIPCOVERS "${INPUT}"
    { set +x; } 2>/dev/null
fi

echo "## Starting encode..."
if [ $NOPIPE ]; then
    set -x
    nice -n 5 $FFMPEG -analyzeduration 100 -probesize 100M -i "$INPUT" $ENCODE_FLAGS "$OUTPUT" && echo "## encode complete." || fail "encode error."
    { set +x; } 2>/dev/null
else
    SWITCHES=$(echo "--${PARAMS}" | sed -e 's/:/\ --/g' -e 's/=/\ /g')
    SWITCHES="--crf ${CRF} --preset ${SVT_PRESET} --progress 3 --irefresh-type 2 -i stdin --input-depth 10 --keyint ${G} ${SWITCHES}"
    set -x
    nice -n 5 ${FFMPEG} -hide_banner -loglevel error -i "${INPUT}" -map 0:v:0 -pix_fmt yuv420p10le ${VF:+-filter:v ${VF}} -f yuv4mpegpipe -strict -1 - | nice -n 5 ${SVTAV1ENCAPP} ${SWITCHES} --output "${OUTPUT%.mkv}.ivf"
    { set +x; } 2>/dev/null
    if [ -n "${AUDIO}" ] && [[ "${AUDIO_FLAGS}" =~ "${AUDIO}" ]]; then
        ${AUDIOVISE} --${AUDIO} --novideo --input "${INPUT}" --output "${OUTPUT%.mkv}.audiovise.mkv"
        [ $? -eq 0 ] || fail "## audiovise error, exiting"
        { set +x; } 2>/dev/null
        set -x
        ${MKVMERGE} -o "${OUTPUT}" "${OUTPUT%.mkv}.ivf" "${OUTPUT%.mkv}.audiovise.mkv"
        [ $? -eq 0 ] || fail "## merge error, exiting"
        { set +x; } 2>/dev/null
        rm "${OUTPUT%.mkv}.ivf"
        rm "${OUTPUT%.mkv}.audiovise.mkv"
        { set +x; } 2>/dev/null
    else
        set -x
        ${MKVMERGE} -o "${OUTPUT}" "${OUTPUT%.mkv}.ivf" --no-video "${INPUT}"
        [ $? -eq 0 ] || fail "## merge error, exiting"
        rm ${OUTPUT%.mkv}.ivf
        { set +x; } 2>/dev/null
    fi
fi

if [[ "${OUTPUT##*.}" == "mkv" ]]; then
    echo "## Stripping tags from \"${OUTPUT}\"..."
    set -x
    $STRIPTAGS "${OUTPUT}" && echo "## Tags stripped from \"${OUTPUT}\"" || fail "## error stripping tags from \"${OUTPUT}\""
    { set +x; } 2>/dev/null

    echo "## Adding stats to \"${OUTPUT}\"..."
    set -x
    $ADDSTATS "${OUTPUT}" && echo "## Stats added to \"${OUTPUT}\"" || fail "## error adding stats to \"${OUTPUT}\""
    { set +x; } 2>/dev/null
fi
