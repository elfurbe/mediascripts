#!/bin/bash

usage() {
cat - <<EOF
Usage: ${0##*/} -i <INPUT FILE>

-h|--help:          show this help message
-i|--input:         file name for input
-o|--output:        base file name for one million artifacts, do not include file extension
-k|--keep:          keep artifacts
-v|--verify:        verify stream with Dolby Vision toolkit, default disabled
-c|--crf:           set an alternate crf
-a|--audio:         transcode source audio to specified codec (opus, aac, flac)
--debug:            print debugging information

EOF
}

fail() {
    printf '%s\n' "$1" >&2 ## Send message to stderr.
    exit "${2-1}" ## Return a code specified by $2, or 1 by default.
}

while [ $# -gt 0 ]; do
    OPT="$1"
    case "${OPT}" in
    -i|--input)
        shift
        INPUT="${1}"
        shift;;
    -o|--output)
        shift
        OUTPUT="${1}"
        shift;;
    -k|--keep)
        KEEP=1
        shift;;
    -v|--verify)
        VERIFY=1
        shift;;
    -c|--crf)
        shift
        CRF="${1}"
        shift;;
    -a|--audio)
        shift
        AUDIO="${1}"
        shift;;
    --debug)
        DEBUG=1
        shift;;
    -h|--help)
        usage
        exit;;
    *) fail "$0: invalid option ${1}";;
    esac
done

# Check for tool dependencies
SELF_FULLPATH=`realpath $0`
SELF_DIR=`dirname $SELF_FULLPATH`
# Override default tool list
TOOLS=(mkvmerge mkvextract mediainfo grep awk dovi_tool hdr10plus_tool jq mkfifo base64)
[ $VERIFY ] && TOOLS+=(dvesverifier)
# Depends on hevcmeup2 for transcoding
SCRIPTS=(hevcmeup2 striptags stripcovers addstats)
[ $AUDIO ] && SCRIPTS+=(audiovise)
if [ ! -r $SELF_DIR/toolchecker ]; then
    echo "toolchecker not found."
    exit 1
else
    . $SELF_DIR/toolchecker
fi

if [ -z "${INPUT}" ]; then
    echo "No input file provided."
    usage
    exit 1
fi

if [ -z "${OUTPUT}" ]; then
    echo "No output file base name provided."
    echo "Building output file base name from input file name..."
    OUTPUT=$(echo "$INPUT" | sed -e 's/.\(mkv\|mp4\|ts\)/_visionary/g')
    echo "Output file name base: ${OUTPUT}"
fi

echo ">> Starting Dolby Vision-aware transcode"; echo

## this makes 'for crf in 16 18 20 22; do visionary -i A.Movie.mkv -o movie --crf $crf; done'
## work so much easier that I don't care if it makes sense to anyone else
if [ -n "${CRF}" ]; then
    OUTPUT="${OUTPUT}_${CRF}"
    echo ">> Appending crf value to output filenames: ${OUTPUT}"
fi

## build assorted artifact filenames and make sure they don't exist
## not all of these are used in all cases
## but I don't want to think about it very hard
FIFO="${OUTPUT}.fifo"
[ -p "${FIFO}" ] && fail "Named pipe already exists: ${FIFO}"
BL="${OUTPUT}.BL.hevc"
[ -f "${BL}" ] && fail "Base-layer file already exists: ${BL}"
BL10P="${OUTPUT}.BL10P.hevc"
[ -f "${BL10P}" ] && fail "HDR10+ base layer already exists: ${BL10P}"
EL="${OUTPUT}.EL.hevc"
[ -f "${EL}" ] && fail "Enhancement-layer file already exists: ${EL}"
RPU="${OUTPUT}.RPU.bin"
[ -f "${RPU}" ] && fail "RPU file already exists: ${RPU}"
RPU_81="${OUTPUT}.RPU_81.bin"
[ -f "${RPU_81}" ] && fail "8.1-compatible RPU file already exists: ${RPU_81}"
HDR10P="${OUTPUT}.hdr10p.json"
[ -f "${HDR10P}" ] && fail "HDR10+ JSON file already exists: ${HDR10P}"
COOKED="${OUTPUT}.BL.x265.hevc"
[ -f "${COOKED}" ] && fail "Transcoding destination file already exists: ${COOKED}"
COOKED_WITH_RPU="${OUTPUT}.BL+RPU.x265.hevc"
[ -f "${COOKED_WITH_RPU}" ] && fail "Transcoded file with RPU injection already exists: ${COOKED_WITH_RPU}"
REMUXED="${OUTPUT}.mkv"
[ -f "${REMUXED}" ] && fail "Final remux target file already exists: ${REMUXED}"

#HDR=$($MEDIAINFO "${INPUT}" | $GREP ^HDR\ format | $AWK -F: '{print $2}')
TRACK=$($MEDIAINFO --output=JSON "$INPUT" | $JQ -r '.media.track[] | select (."@type"=="Video") | @base64')
HDRFORMAT=$(echo "${TRACK}" | $BASE64 --decode | $JQ -r '.HDR_Format')
[[ "$HDRFORMAT" =~ "Dolby" ]] || fail "not a dolby vision file"
## figure out what sort of dovi stream we're dealing with
DOVIPROFILE=$(echo "${TRACK}" | $BASE64 --decode | $JQ -r '.HDR_Format_Profile' | $AWK '{print $1}')
DOVILEVEL=$(echo "${TRACK}" | $BASE64 --decode | $JQ -r '.HDR_Format_Level' | $AWK '{print $1}')
FORMATCOMPAT=$(echo "${TRACK}" | $BASE64 --decode | $JQ -r '.HDR_Format_Compatibility' | $AWK -F\ /\  '{print $2}' | $AWK '{print $1}')

echo ">> Dolby Vision profile: $DOVIPROFILE"
echo ">> Dolby Vision level: $DOVILEVEL"
echo ">> Base layer compatibility: $FORMATCOMPAT"; echo

echo ">> Making named pipe"; echo
set -x
$MKFIFO ${FIFO}
{ set +x; } 2>/dev/null
echo

case "$DOVIPROFILE" in
    "dvhe.05")
        ## create a clean BL and convert the RPU to 8.1 format
        [ $DEBUG ] && echo "MEL-type profile 5"
        echo ">> NOTE: Profile 5 uses non-standard IPT-PQ-C2 colorspace in BL. Colors will not be properly rendered on playback devices that do not support Dolby Vision."

        ## create stripped base layer
        echo ">> Creating stripped base layer"; echo
        set -x
        $MKVEXTRACT "${INPUT}" tracks 0:${FIFO} &
        $DOVI_TOOL remove --output "${BL}" - <${FIFO} || fail "Base layer stripping failed."
        { set +x; } 2>/dev/null
        echo

        ## extract the RPU
        echo ">> Extracting RPU"; echo
        set -x
        $MKVEXTRACT "${INPUT}" tracks 0:${FIFO} &
        $DOVI_TOOL --mode 3 extract-rpu --rpu-out "${RPU_81}" - <${FIFO} || fail "RPU extraction failed."
        { set +x; } 2>/dev/null
        echo

        ## if there's hdr10+ metadata, we gon save that too
        if [[ "$FORMATCOMPAT" =~ "HDR10+" ]]; then
            echo ">> HDR10+ base layer detected, preserving HDR10+ metadata"; echo
            set -x
            $HDR10PLUS_TOOL extract -i ${BL} -o ${HDR10P} || fail "HDR10+ extraction failed."
            { set +x; } 2>/dev/null
            echo
        fi
        ;;
    "dvhe.07")
        ## since I can't figure out how to preserve a FEL, we're gonna demux the BL and EL and extract the RPU to 8.1 format
        [ $DEBUG ] && echo "FEL-type profile 7"
        [ $DEBUG ] && echo "Cannot preserve EL through transcoding, will convert RPU to 8.1 format"

        ## demux the layers
        echo ">> Demuxing layers"; echo
        set -x
        $MKVEXTRACT "${INPUT}" tracks 0:${FIFO} &
        $DOVI_TOOL demux --bl-out "${BL}" --el-out "${EL}" - <${FIFO}  || fail "Demuxing failed."
        { set +x; } 2>/dev/null
        echo

        ## extract the original RPU from the EL
        ## until I figure out how to preserve a FEL stack, no need for this step, but I'm keeping it in here
        #[ $DEBUG ] && echo "Extracting RPU"
        #$DOVI_TOOL extract-rpu --input ${EL} --rpu-out ${RPU}
        
        ## extract and convert the profile 7 RPU to a profile 8.1 RPU
        echo ">> Extracting RPU in 8.1 format"; echo
        set -x
        $DOVI_TOOL --mode 2 extract-rpu --input ${EL} --rpu-out ${RPU_81} || fail "RPU extraction failed."
        { set +x; } 2>/dev/null
        echo

        ## if there's hdr10+ metadata, we gon save that too
        if [[ "$FORMATCOMPAT" =~ "HDR10+" ]]; then
            echo ">> HDR10+ base layer detected, preserving HDR10+ metadata"; echo
            set -x
            $HDR10PLUS_TOOL extract -i ${BL} -o ${HDR10P} || fail "HDR10+ extraction failed."
            { set +x; } 2>/dev/null
            echo
        fi
        ;;
    "dvhe.08")
        ## create a clean BL and convert the RPU to 8.1 format
        [ $DEBUG ] && echo "MEL-type profile 8"

        ## create stripped base layer
        echo ">> Creating stripped base layer"; echo
        set -x
        $MKVEXTRACT "${INPUT}" tracks 0:${FIFO} &
        $DOVI_TOOL remove --output "${BL}" - <${FIFO} || fail "Base layer stripping failed."
        { set +x; } 2>/dev/null
        echo

        ## extract the RPU
        echo ">> Extracting RPU"; echo
        set -x
        $MKVEXTRACT "${INPUT}" tracks 0:${FIFO} &
        $DOVI_TOOL extract-rpu --rpu-out "${RPU_81}" - <${FIFO} || fail "RPU extraction failed."
        { set +x; } 2>/dev/null
        echo

        ## if there's hdr10+ metadata, we gon save that too
        if [[ "$FORMATCOMPAT" =~ "HDR10+" ]]; then
            echo ">> HDR10+ base layer detected, preserving HDR10+ metadata"; echo
            set -x
            $HDR10PLUS_TOOL extract -i ${BL} -o ${HDR10P} || fail "HDR10+ extraction failed."
            { set +x; } 2>/dev/null
            echo
        fi
        ;;
    *) 
        ## not gonna need that fifo after all I guess
        echo ">> Cleaning up named pipe"; echo
        set -x
        rm ${FIFO}
        { set +x; } 2>/dev/null
        echo
        fail "Unrecognized Dolby Vision identifier: ${DOVIPROFILE}";;
esac
        
## we're done with the fifo
echo ">> Cleaning up named pipe"; echo
set -x
rm ${FIFO}
{ set +x; } 2>/dev/null
echo

echo ">> Starting encode..."; echo
set -x
$HEVCMEUP2 --input ${BL} --output ${COOKED} --dovi-bl ${CRF:+--crf $CRF} || fail "Encode failed."
{ set +x; } 2>/dev/null
echo

## if there's hdr10+ metadata, we gon deal with it <puts on glasses>
if [[ "$FORMATCOMPAT" =~ "HDR10+" ]]; then
    echo ">> Injecting HDR10+ metadata into base layer..."; echo
    set -x
    $HDR10PLUS_TOOL inject -i ${COOKED} -j ${HDR10P} -o ${BL10P} || fail "HDR10+ injection failed."
    { set +x; } 2>/dev/null
    echo
    echo ">> Injecting RPU into transcoded HDR10+ injected BL..."; echo
    set -x
    $DOVI_TOOL inject-rpu --input ${BL10P} --rpu-in ${RPU_81} --output ${COOKED_WITH_RPU} || fail "RPU injection failed."
    { set +x; } 2>/dev/null
    echo
else
    echo ">> Injecting RPU into transcoded BL..."; echo
    set -x
    $DOVI_TOOL inject-rpu --input ${COOKED} --rpu-in ${RPU_81} --output ${COOKED_WITH_RPU} || fail "RPU injection failed."
    { set +x; } 2>/dev/null
    echo
fi

if [ $VERIFY ]; then
    echo ">> Running Dolby Vision stream verifier"; echo
    set -x
    $DVESVERIFIER --input ${COOKED_WITH_RPU} --rpu-compare ${RPU_81} --dv-profile 8.1 --dv-level ${DOVILEVEL#0} --verbose 1 || fail "Dolby Vision verification failed."
    { set +x; } 2>/dev/null
    echo
fi

if [[ "${AUDIO}" =~ (opus|aac|flac) ]]; then
    echo ">> Transcoding source audio to ${AUDIO}..."
    OTHERTRACKS="${OUTPUT}_${AUDIO}.mkv"
    set -x
    $AUDIOVISE -i ${INPUT} -o ${OTHERTRACKS} --${AUDIO} --novideo
    { set +x; } 2>/dev/null
    echo
elif [[ "${AUDIO}" ]] ; then
    echo ">> Audio codec \"${AUDIO}\" not recognized, ignoring"
    OTHERTRACKS="${INPUT}"
else
    OTHERTRACKS="${INPUT}"
fi

echo ">> Remuxing transcoded video with other source tracks..."; echo
set -x
$MKVMERGE --output "${OUTPUT}.mkv" "${COOKED_WITH_RPU}" --no-video "${OTHERTRACKS}" || fail "Merge failed."
$STRIPTAGS "${OUTPUT}.mkv"
$STRIPCOVERS "${OUTPUT}.mkv"
$ADDSTATS "${OUTPUT}.mkv"
{ set +x; } 2>/dev/null
echo

if [ $KEEP ]; then
    echo ">> Preserving intermediate files"
else
    echo ">> Removing intermediate files..."; echo
    CLEANUP=(${BL} ${EL} ${RPU} ${RPU_81} ${COOKED} ${COOKED_WITH_RPU} ${HDR10P} ${BL10P})
    [[ "${OTHERTRACKS}" != "${INPUT}" ]] && CLEANUP+=(${OTHERTRACKS})
    for FILE in ${CLEANUP[@]}; do
        if [ -f "${FILE}" ]; then
            set -x
            rm ${FILE}
            { set +x; } 2>/dev/null
        fi
    done
fi
echo

echo ">> Complete"
