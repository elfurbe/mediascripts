#!/bin/bash

usage() {
cat - <<EOF
Usage: $NAME -i <INPUT FILE> -o <OUTPUT FILE>

-h|--help:     show this help message
-i|--input:    file name for input
-o|--output:   file name for output
--start:       start time for encode (default: unset)
--duration:    duration of encode (default: unset)
--encoder:     which av1 encoder to use (rav1e or aom)
--crf:         aom crf value (default 18)
--cpu-used:    aom cpu-used value (range from 0-8 0: slowest/best, 8:fastest/worst, default 5)
--qp:          rav1e qp value (1-255, default varies with input res, 1080:40, 720: 60, 480: 80)
--speed:       rav1e speed value (0-10, default: 4)
--crop:        enable crop detection (default: no)
--debug:       output commands to be run, run nothing
--iprofile:    input profile [remux]
--oprofile:    output profile [1080, 720, 480]
--vf:          custom videofilter input
--sdr:         best effort 2020->709 color fix
--deint:       deinterlace with yadif 
--mcdeint:     deinterlace with yadif and mcdeint
--eight:       use 8-bit pixels because you're boring
--twelve:      use 12-bit pixels because you're awful
--audio:       transcode audio tracks to selected codec [flac, opus, aac]

EOF
}

while [ $# -gt 0 ]; do
    OPT="$1"
    case "${OPT}" in
    -i|--input)
        shift
        INPUT="${1}"
        shift;;
    -o|--output)
        shift
        OUTPUT="${1}"
        shift;;
    --start)
        shift
        START="${1}"
        shift;;
    --duration)
        shift
        DURATION="${1}"
        shift;;
    --encoder)
        shift
        ENCODER="${1}"
        shift;;
    --crf)
        shift
        CRF="${1}"
        shift;;
    --cpu-used)
        shift
        CPUUSED="${1}"
        shift;;
    --qp)
        shift
        QP="${1}"
        shift;;
    --speed)
        shift
        SPEED="${1}"
        shift;;
    --crop)
        CROP=1
        shift;;
    --debug)
        DEBUG=1
        shift;;
    --iprofile)
        shift
        IPROFILE="${1}"
        shift;;
    --oprofile)
        shift
        OPROFILE="${1}"
        shift;;
    --vf)
        shift
        VIDEOFILTER="${1}"
        shift;;
    --sdr)
        SDR=1
        shift;;
    --deint)
        DEINT=1
        shift;;
    --audio)
        shift
        AUDIO="${1}"
        shift;;
    --eight)
        EIGHT=1
        shift;;
    --twelve)
        TWELVE=1
        shift;;
    -h|--help)
        usage
        exit;;
    *)
        echo "$0: invalid option ${1}"
        echo "$0 -h for usage options"
        usage
        exit 1;;
    esac
done

# Check for tool dependencies
SELF_FULLPATH=`realpath $0`
SELF_DIR=`dirname $SELF_FULLPATH`
if [ ! -r $SELF_DIR/toolchecker ]; then
    echo "toolchecker not found."
    exit 1
else
    . $SELF_DIR/toolchecker
fi

if [ -z "$INPUT" ] || [ -z "$OUTPUT" ]; then
    echo "Insufficient options provided."
    echo "Must supply input (-i/--input) and output (-o/--output) at minimum"
    usage
    exit 1
fi

if [ ! -s "$INPUT" ]; then
    echo "Error reading input file: $INPUT"
    exit 1
elif [ -f "$OUTPUT" ]; then
    echo "Output file exists."
    exit 1
fi

if [ ! -z "$IPROFILE" ]; then
    case "${IPROFILE}" in
        remux)
            CROP=1;;
        *)
            echo "Not a recognized input profile name."
            exit 1;;
    esac
fi

if [ $EIGHT ] && [ $TWELVE ]; then
    echo "Cannot use both --eight and --twelve. Pick one. Or use the defaults like a decent person."
    exit 1
elif [ $TWELVE ]; then
    PIXEL_FORMAT="yuv420p12le"
elif [ $EIGHT ]; then
    PIXEL_FORMAT="yuv420p"
else
    PIXEL_FORMAT="yuv420p10le"
fi

if [ -z $ENCODER ]; then
    ENCODER=rav1e
fi

case $ENCODER in
    rav1e)
        CODEC="librav1e"
        if [ -z $SPEED ]; then
            SPEED=5
        fi
        if [ -z $QP ]; then
            QP=40
        fi
        if [ ! -z $CRF ]; then
            echo "Cannot use --crf with rav1e."
            exit 1
        fi
        if [ ! -z $CPUUSED ]; then
            echo "Cannot use --cpu-used with rav1e."
            exit 1
        fi
        DEFAULT_FLAGS="-map 0 -map -0:d -c:v librav1e -pix_fmt $PIXEL_FORMAT -qp $QP -speed $SPEED -tile-rows 4 -tile-columns 2 -c:s copy -max_muxing_queue_size 9999"
        ;;
    aom)
        if [ -z $CRF ]; then
            CRF=18
        fi
        if [ -z $CPUUSED ]; then
            CPUUSED=5
        fi
        if [ ! -z $QP ]; then
            echo "Cannot use --qp with aom."
            exit 1;
        fi
        if [ ! -z $SPEED ]; then
            echo "Cannot use --speed with aom."
        fi
        CODEC="libaom-av1"
        DEFAULT_FLAGS="-map 0 -map -0:d -c:v $CODEC -pix_fmt $PIXEL_FORMAT -crf $CRF -b:v 0 -cpu-used $CPUUSED -tiles 2x2 -row-mt 1 -threads 6 ${AUDIO_FLAGS} -c:s copy -max_muxing_queue_size 9999"
        ;;
esac

if [ ! -z "$OPROFILE" ]; then
    case "${OPROFILE}" in
        1080)
            VF="scale=1920:-1"
            case $ENCODER in
                rav1e)
                    QP=40;;
                aim)
                    CRF=18;;
            esac
            ;;
        720)
            VF="scale=1280:-1"
            case $ENCODER in
                rav1e)
                    QP=60;;
                aim)
                    CRF=22;;
            esac
            ;;
        480)
            VF="scale=480:-1"
            case $ENCODER in
                rav1e)
                    QP=80;;
                aim)
                    CRF=26;;
            esac
            ;;
        1440)
            VF="scale=-1:1080,crop=1440:1080:240:0"
            case $ENCODER in
                rav1e)
                    QP=40;;
                aim)
                    CRF=18;;
            esac
            ;;
        960)
            VF="scale=-1:720,crop=1440:1080:240:0"
            case $ENCODER in
                rav1e)
                    QP=60;;
                aim)
                    CRF=22;;
            esac
            ;;
        *)
            echo "Not a recognized output profile name."
            exit 1;;
    esac
fi

if [ $CROP ]; then
    if [ ! -x $CROPFINDER ]; then
        exit 1
    fi

    SEGMENTS=10
    CFOUTPUT=$($CROPFINDER -i "$INPUT" -s $SEGMENTS -d)

    if [ $DEBUG ]; then
        echo "$CFOUTPUT"
    fi
    CROP=$(echo "$CFOUTPUT" | tail -n1)
    VF="${CROP}${VF:+,${VF}}"
fi

AUDIO_FLAGS="-c:a copy"
if [ $AUDIO ]; then        
    NL=$'\n'
    AUDIO_TRACK_META=""
    TRACKS=`$FFPROBE "$INPUT" 2>&1 | grep "Audio: "`
    while read -r i; do
        TRACK_NUMBER=`echo ${i} | awk -F: '{print $2}' | awk -F\( '{print $1}'`
        TRACK_CODEC=`echo ${i} | awk -F: '{print $4}' | awk -F, '{print $1}' | sed -e 's/^[[:space:]]*//'`
        TRACK_LAYOUT=`echo ${i} | awk -F, '{print $3}' | sed -e 's/^[ \t]*//'`
        if [ "$TRACK_LAYOUT" == "1 channels" ]; then
            TRACK_LAYOUT="mono"
        elif [ "$TRACK_LAYOUT" == "2 channels" ]; then
            TRACK_LAYOUT="stereo"
        fi
        TRACK_META="${TRACK_NUMBER},${TRACK_CODEC},${TRACK_LAYOUT}${NL}"
        AUDIO_TRACK_META="${AUDIO_TRACK_META}${TRACK_META}"
    done < <(echo "$TRACKS")
    AUDIO_TRACK_META=`echo "$AUDIO_TRACK_META" | sed 's/^$//g'`
    if [ $DEBUG ]; then
        echo
        echo "Input Audio Tracks"
        echo "------------------"
        echo "Track,Codec,Layout${NL}${AUDIO_TRACK_META}" | column -t -s, -o " | "
        echo
    fi
    case "${AUDIO}" in
        flac)
            while read -r i; do
                read TRACK_NUMBER TRACK_CODEC TRACK_LAYOUT <<< $( echo "$i" | sed 's/,//g' )
                if [[ "$TRACK_CODEC" =~ .*"pcm".* ]]; then
                    FLAC_FLAGS="-c:${TRACK_NUMBER} flac $FLAC_FLAGS"
                fi
            done < <(echo "$AUDIO_TRACK_META")
            AUDIO_FLAGS="$AUDIO_FLAGS ${FLAC_FLAGS:0:-1}" ;;
        opus)
            AUDIO_FLAGS="-c:a libopus -af aformat=channel_layouts='7.1|5.1|stereo|mono'"
            while read -r i; do
                IFS=, read -r TRACK_NUMBER TRACK_CODEC TRACK_LAYOUT <<< $( echo "$i" )
                case "${TRACK_LAYOUT}" in 
                    mono) TRACK_BITRATE="64k";;
                    stereo) TRACK_BITRATE="128k";;
                    *) TRACK_BITRATE="450k";;
                esac
                TRACK_FLAGS="-ab:${TRACK_NUMBER} ${TRACK_BITRATE} "
                OPUS_FLAGS="${OPUS_FLAGS}${TRACK_FLAGS}"
                OUTPUT_TRACK_META="${OUTPUT_TRACK_META}${TRACK_NUMBER},opus,${TRACK_LAYOUT},${TRACK_BITRATE}${NL}"
            done < <(echo "$AUDIO_TRACK_META")
            echo "Output Audio Tracks"
            echo "------------------"
            echo "Track,Codec,Layout,Bitrate${NL}${OUTPUT_TRACK_META}" | column -t -s, -o " | "
            echo
            unset IFS
            AUDIO_FLAGS="$AUDIO_FLAGS ${OPUS_FLAGS:0:-1}"
            ;;
        aac)
            TRACKS=`$FFPROBE "$INPUT" 2>&1 | grep "Audio: "`
            #AUDIO_FLAGS="-c:a libfdk_aac -vbr 5"
            AUDIO_FLAGS="-c:a libfdk_aac"
            while read -r i; do
                read TRACK_NUMBER TRACK_CODEC TRACK_LAYOUT <<< $( echo "$i" | sed 's/,//g' )
                case "${TRACK_LAYOUT}" in 
                    mono) TRACK_BITRATE="96k";;
                    stereo) TRACK_BITRATE="192k";;
                    *) TRACK_BITRATE="450k";;
                esac
                TRACK_FLAGS="-ab:${TRACK_NUMBER} ${TRACK_BITRATE} "
                AAC_FLAGS="${AAC_FLAGS}${TRACK_FLAGS}"
            done < <(echo "$AUDIO_TRACK_META")
            AUDIO_FLAGS="$AUDIO_FLAGS ${AAC_FLAGS:0:-1}"
            ;;
        *)
            echo "Unknown codec: ${AUDIO}"
            exit 1;;
    esac
fi

DEFAULT_FLAGS="${DEFAULT_FLAGS} ${AUDIO_FLAGS}"

if [ ! -z "$DURATION" ]; then
    DEFAULT_FLAGS="$DEFAULT_FLAGS -t $DURATION"
fi

if [ ! -z "$START" ]; then
    FFMPEG="$FFMPEG -ss $START"
fi

if [ $SDR ]; then
    #tonemap=tonemap=mobius:desat=0
    #VF="zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=hable:desat=0,zscale=t=bt709:m=bt709:r=tv${VF:+,${VF}}"
    VF="zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=mobius:desat=0,zscale=t=bt709:m=bt709:r=full${VF:+,${VF}}"
fi

SCANTYPE=`$MEDIAINFO "$INPUT" | grep "Scan type " | awk '{print $4}'`
SCANORDER=`$MEDIAINFO "$INPUT" | grep "Scan order " | awk '{print $4}'`
if [ $DEINT ] && [ $MCDEINT ]; then
    echo "Cannot use both --deint and --mcdeint together. Pick one."
    exit 1
elif [ $DEINT ]; then
    if [ "$SCANTYPE" = "Interlaced" ] || [ "$SCANTYPE" = "MBAFF" ] || [ "$SCANTYPE" = "PAFF" ]; then
        if [ "$SCANORDER" = "Top Field First" ]; then
            VF="yadif=1:0:0${VF:+,${VF}}"
        else
            VF="yadif=1:1:0${VF:+,${VF}}"
        fi
    else
        if [ $DEBUG ]; then
            echo "Input video is not interlaced, skipping deint"
        fi
    fi
elif [ $MCDEINT ]; then
    #VF="yadif=1,mcdeint=2:1:10${VF:+,${VF}}"
    # Some forum thread said to use yadif mode 3 so, yolo I guess
    if [ "$SCANTYPE" = "Interlaced" ] || [ "$SCANTYPE" = "MBAFF" ] || [ "$SCANTYPE" = "PAFF" ]; then
        if [ "$SCANORDER" = "Top Field First" ]; then
            VF="yadif=3:0:0,mcdeint=2:0:10${VF:+,${VF}}"
        else
            VF="yadif=3:1:0,mcdeint=2:1:10${VF:+,${VF}}"
        fi
    else
        if [ $DEBUG ]; then
            echo "Input video is not interlaced, skipping mcdeint"
        fi
    fi
fi

if [ ! -z "$VIDEOFILTER" ]; then
    VF="$VIDEOFILTER${VF:+,${VF}}"
fi

if [ ! -z "$VF" ]; then
    DEFAULT_FLAGS="$DEFAULT_FLAGS -vf $VF"
fi

if [ $DEBUG ]; then
    echo "COMMANDS:"
    echo "$MKVPROPEDIT \"$INPUT\" --delete-attachment mime-type:image/jpeg"
    echo "$MKVPROPEDIT \"$INPUT\" --tags all:\"\" --delete title"
    echo "nice -n 5 $FFMPEG -i \"$INPUT\" $DEFAULT_FLAGS \"$OUTPUT\""
    echo "$MKVPROPEDIT --add-track-statistics-tags \"$OUTPUT\""
    #exit
    read -p "Press y to encode, any other key to exit..." confirm
    case $confirm in
        [Yy] ) true;;
        * ) exit;;
    esac
fi

$MKVPROPEDIT "$INPUT" --delete-attachment mime-type:image/jpeg
$MKVPROPEDIT "$INPUT" --tags all:"" --delete title
nice -n 5 $FFMPEG -i "$INPUT" $DEFAULT_FLAGS "$OUTPUT"
$MKVPROPEDIT --add-track-statistics-tags "$OUTPUT"
