#!/usr/bin/env bash

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
    echo "Exiting."
    exit 1
}

usage() {
cat - <<EOF
Usage: $NAME -e <ENCODED FILE> -s <SOURCE FILE>

-h|--help:      show this help message
-e|--encoded:   encoded file to test
-s|--source:    original source file
--no-ssim:      disable ssim calculation
--no-ms_ssim:   disable ms_ssim calculation
--no-psnr:      disable psnr calculation
--no-adm:       disable adm calculation
--no-motion2:   disable motion2 calculation
--no-ciede:     disable ciede calculation
--subsample:    set number of frames to subsample (default: equal to frame rate)
--log:          override default vmaf logfile destination
--log-format:   specify vmaf log format (csv, json, xml, or sub, default: csv)
--model:        override default vmaf model (full path to model json)
--threads:      specify number of threads (default: no limit)
--cropped:      encoded file is cropped, so cropdetect the source and filter it
-d|--debug:     enable debugging output

EOF
}

while [ $# -gt 0 ]; do
    OPT="$1"
    case "${OPT}" in
    -e|--encoded)
            shift
            ENCODED="${1}"
            if [ ! -s "$ENCODED" ]; then
                echo "Error reading encoded file: $ENCODED"
                exit 1
            fi
            shift;;
    -s|--source)
            shift
            SOURCE="${1}"
            if [ ! -s "$SOURCE" ]; then
                echo "Error reading source file: $SOURCE"
                exit 1
            fi
            shift;;
    --subsample)
            shift
            SUBSAMPLE="${1}"
            shift;;
    --log)
            shift
            LOG="${1}"
            shift;;
    --log-format)
            shift
            if [[ "csv json xml sub" == *"${1}"* ]]; then
                LOG_FORMAT="${1}"
            else
                echo "invalid log format"
                exit 1
            fi
            shift;;
    --model)
            shift
            MODEL="${1}"
            shift;;
    --threads)
            shift
            THREADS="${1}"
            shift;;
    -d|--debug)
            DEBUG=1
            shift;;
    --no-ssim)
            NOSSIM=1
            shift;;
    --no-ms_ssim)
            NOMSSSIM=1
            shift;;
    --no-psnr)
            NOPSNR=1
            shift;;
    --no-cambi)
            NOCAMBI=1
            shift;;
    --no-vif)
            NOVIF=1
            shift;;
    --no-adm)
            NOADM=1
            shift;;
    --no-motion2)
            NOMOTION2=1
            shift;;
    --no-ciede)
            NOCIEDE=1
            shift;;
    --cropped)
            CROPPED=1
            shift;;
    -h|--help)
            usage
            exit;;
    *)
            echo "$0: invalid option ${1}"
            echo "$0 -h for usage options"
            usage
            exit 1;;
    esac
done

# Check for tool dependencies
SELF_FULLPATH=`realpath $0`
SELF_DIR=`dirname $SELF_FULLPATH`
# Override default tool list, we only need these two
TOOLS=(ffmpeg ffprobe bc mediainfo jq base64 awk)
# Does not depend on any other scripts
SCRIPTS=(cropfinder)
if [ ! -r $SELF_DIR/toolchecker ]; then
    echo "toolchecker not found."
    exit 1
else
    . $SELF_DIR/toolchecker
fi

if [ -z "$ENCODED" ]; then
    echo "Must supply encoded (-e/--encoded) file"
    usage
    exit 1
fi

if [ -z "$SOURCE" ]; then
    echo "Must supply source (-s/--source) file"
    usage
    exit 1
fi

## START BUILDING THE VMAF_PARAMS STRING
MI=$($MEDIAINFO --output=JSON "$SOURCE" | $BASE64)

if [ -z "$MODEL" ]; then
    WIDTH=`echo "${MI}" | $BASE64 --decode | $JQ -r '.media.track[] | select (."@type"=="Video").Width'`
	[ $DEBUG ] && echo "SOURCE WIDTH: $WIDTH"

    [ $WIDTH -gt 1920 ] && MODELFILE="vmaf_4k_v0.6.1.json" || MODELFILE="vmaf_v0.6.1.json"
    [ $DEBUG ] && echo "MODELFILE: $MODELFILE"

    if [ ! -z "${VMAF_MODELPATH}" ] && [ -d ${VMAF_MODELPATH} ] && [ -f ${VMAF_MODELPATH}/${MODELFILE} ]; then
        MODEL="${VMAF_MODELPATH}/${MODELFILE}"
    elif [ ! -z "${FFMPEG_PREFIX}" ] && [ -d "${FFMPEG_PREFIX}" ] && [ -f ${FFMPEG_PREFIX}/share/vmaf/model/${MODELFILE} ]; then
        MODEL="/opt/ffmpeg5/share/vmaf/model/${MODELFILE}"
    else
        fail "<> No model file provided, no model file located, we have no model, repeat: we have no model."
    fi
    VMAF_PARAMS="model='path=${MODEL}'"
    [ $DEBUG ] && echo "VMAF_PARAMS MODEL PATH: $VMAF_PARAMS"
else
    VMAF_PARAMS="model='path=${MODEL}'"
fi

if [ -z "$SUBSAMPLE" ]; then
    FRAME_RATE=`$FFPROBE -v error -select_streams v -of default=noprint_wrappers=1:nokey=1 -show_entries stream=r_frame_rate "$SOURCE" | $BC -l`
    SUBSAMPLE=`printf "%.0f\n" "$FRAME_RATE"`
fi    
VMAF_PARAMS="${VMAF_PARAMS}:n_subsample=${SUBSAMPLE}"

F_DURATION=$($FFPROBE -v error -select_streams v -of default=noprint_wrappers=1:nokey=1 -show_entries format=duration "$SOURCE")
I_DURATION=$(echo ${F_DURATION} | awk -F. '{print $1}')
DURATION=$(echo "${I_DURATION} * ${FRAME_RATE} / ${SUBSAMPLE}" | bc)

[ -z "$LOG_FORMAT" ] && LOG_FORMAT="csv"
VMAF_PARAMS="${VMAF_PARAMS}:log_fmt=${LOG_FORMAT}"

[ -z "$LOG" ] && LOG="$(basename "${ENCODED}" .mkv).vmaf"
VMAF_PARAMS="${VMAF_PARAMS}:log_path=${LOG}"

VMAF_FEATURES=""
## EXAMPLE FROM https://ffmpeg.org/ffmpeg-all.html#libvmaf
#feature=name=psnr|name=ciede

#SSIM="feature='name=float_ssim':feature='name=ssim':ssim=1'"
SSIM="name=float_ssim"
[ ! $NOSSIM ] && VMAF_FEATURES="${VMAF_FEATURES}|$SSIM"

#MSSSIM="feature='name=float_ms_ssim':feature='name=ms_ssim':ms_ssim=1"
MSSSIM="name=float_ms_ssim"
[ ! $NOMSSSIM ] && VMAF_FEATURES="${VMAF_FEATURES}|$MSSSIM"

#PSNR="feature='name=psnr':feature='name=psnr_hvs'"
PSNR="name=psnr"
[ ! $NOPSNR ] && VMAF_FEATURES="${VMAF_FEATURES}|$PSNR"

VIF="name=vif"
[ ! $NOVIF ] && VMAF_FEATURES="${VMAF_FEATURES}|$VIF"

CAMBI="name=cambi"
[ ! $NOCAMBI ] && VMAF_FEATURES="${VMAF_FEATURES}|$CAMBI"

ADM="name=adm"
[ ! $NOADM ] && VMAF_FEATURES="${VMAF_FEATURES}|$ADM"

MOTION2="name=motion"
[ ! $NOMOTION2 ] && VMAF_FEATURES="${VMAF_FEATURES}|$MOTION2"

CIEDE="name=ciede"
[ ! $NOCIEDE ] && VMAF_FEATURES="${VMAF_FEATURES}|$CIEDE"

VMAF_PARAMS="${VMAF_PARAMS}:feature=${VMAF_FEATURES#"|"}"

[ -n "$THREADS" ] && VMAF_PARAMS="threads=${THREADS}:${VMAF_PARAMS}"

if [ $CROPPED ]; then
    echo "The encoded file is cropped, detecting crop for make-a the magic"
    INPUT="${SOURCE}"
    INPUT_WIDTH=`$MEDIAINFO --Output=JSON "${INPUT}" | $JQ -r '.media.track[] | select(."@type" == "Video" ).Width'`
    INPUT_HEIGHT=`$MEDIAINFO --Output=JSON "${INPUT}" | $JQ -r '.media.track[] | select(."@type" == "Video" ).Height'`
    CFOUTPUT=$($CROPFINDER -i "$INPUT" -s 10 -d)

    [ $DEBUG ] && echo "$CFOUTPUT"
    CROP=$(echo "$CFOUTPUT" | tail -n1)
    IFS=':' read width height left top <<< "$(echo "$CROP" | ${AWK} -F= '{print $2}')"
    if [ $INPUT_WIDTH -eq $width ] && [ $INPUT_HEIGHT -eq $height ]; then
        echo "## No crop detected"
    else
        if [ $height -eq 1072 ]; then
            [ $DEBUG ] && echo "The dumb eight pixel height crop, ignoring"
            height=1080
            top=0
            CROP="crop=$width:1080:$left:0"
        fi
        if [ $width -eq 1904 ] && [ $INPUT_WIDTH -ne 1904 ]; then
            [ $DEBUG ] && echo "The dumb sixteen pixel width crop, ignoring"
            width=1920
            left=0
            CROP="crop=$width:$height:$left:$top"
        fi
        if [ $width -ne $INPUT_WIDTH ] && [ $height -ne $INPUT_HEIGHT ]; then
            [ $DEBUG ] && echo "Crop detected in both dimensions, that's not great"
            if [ $left -gt $top ]; then
                [ $DEBUG ] && echo "Maintaining input height ($INPUT_HEIGHT)"
                if [ $(( $height + 2 * $top )) -ne $INPUT_HEIGHT ]; then
                    GUTTERS=$(( ($INPUT_HEIGHT - $height) / 2 ))
                    PAD="pad=$width:$INPUT_HEIGHT:0:$GUTTERS"
                    CROP="$CROP,$PAD"
                    [ $DEBUG ] && echo "Evenly padding crop height ($height) back to input height ($INPUT_HEIGHT) with gutters ($GUTTERS)"
                else
                    width=$INPUT_WIDTH
                    CROP="crop=$width:$INPUT_HEIGHT:$left:0"
                    [ $DEBUG ] && echo "Using original input height ($INPUT_HEIGHT)"
                fi
            elif [ $top -gt $left ]; then
                [ $DEBUG ] && echo "Maintaining input width ($INPUT_WIDTH)"
                if [ $(( $width + 2 * $left )) -ne $INPUT_WIDTH ]; then
                    GUTTERS=$(( ($INPUT_WIDTH - $width) / 2 ))
                    PAD="pad=$INPUT_WIDTH:$height:$GUTTERS:$top"
                    CROP="$CROP,$PAD"
                    [ $DEBUG ] && echo "Evenly padding crop width ($width) back to input width ($INPUT_WIDTH) with gutters ($GUTTERS)"
                else
                    width=$INPUT_WIDTH
                    CROP="crop=$INPUT_WIDTH:$height:0:$top"
                    [ $DEBUG ] && echo "Using original input width ($INPUT_WIDTH)"
                fi
            else
                echo "## Ran out of cropping ideas. Look at this crop with your eyes, type it in with your hands."
                echo "## This is what cropfinder delivered: ${CROP}"
                exit 1
            fi
        fi
        if [ $INPUT_WIDTH -eq $width ] && [ $INPUT_HEIGHT -eq $height ]; then
            echo "## After much consideration, no crop required"
        else
            echo "## ${CROP}"
        fi
    fi
fi

[ -n "$CROP" ] && LAVFI="[1:v]$CROP[source];[0:v][source]libvmaf=${VMAF_PARAMS}" || LAVFI="[0:v][1:v]libvmaf=${VMAF_PARAMS}"

if [ $DEBUG ]; then
    echo ">> COMMAND"
    echo nice -n 5 ${FFMPEG} -analyzeduration 100 -probesize 100M -loglevel quiet -stats -t ${DURATION} -i "${ENCODED}" -i "${SOURCE}" -map 0:v -map 1:v -map_chapters -1 -lavfi ${LAVFI} -f null -
    read -p "Press y to continue, any other key to exit..." confirm
    case $confirm in
        [Yy] ) true;;
        * ) exit;;
    esac
fi

set -x
nice -n 5 ${FFMPEG} -analyzeduration 100 -probesize 100M -loglevel quiet -stats -t ${DURATION} -i "${ENCODED}" -i "${SOURCE}" -map 0:v -map 1:v -map_chapters -1 -lavfi ${LAVFI} -f null -
{ set +x; } 2>/dev/null
