#!/bin/bash

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
    echo "Exiting."
    exit 1
}

usage() {
cat - <<EOF
Usage: $NAME -e <ENCODED FILE> -s <SOURCE FILE>

-h|--help:      show this help message
-e|--encoded:   encoded file to test
-s|--source:    original source file
--no-ssim:      disable ssim calculation
--no-ms_ssim:   disable ms_ssim calculation
--no-psnr:      disable psnr calculation
--no-adm:       disable adm calculation
--no-motion2:   disable adm motion2 calculation
--subsample:    set number of frames to subsample (default: equal to frame rate)
--log:          override default vmaf logfile destination
--log-format:   specify vmaf log format (csv, json, xml, or sub, default: csv)
--model:        override default vmaf model (full path to model json)
--threads:      specify number of threads (default: no limit)
-d|--debug:     enable debugging output

EOF
}

while [ $# -gt 0 ]; do
    OPT="$1"
    case "${OPT}" in
    -e|--encoded)
            shift
            ENCODED="${1}"
            if [ ! -s "$ENCODED" ]; then
                echo "Error reading encoded file: $ENCODED"
                exit 1
            fi
            shift;;
    -s|--source)
            shift
            SOURCE="${1}"
            if [ ! -s "$SOURCE" ]; then
                echo "Error reading source file: $SOURCE"
                exit 1
            fi
            shift;;
    --subsample)
            shift
            SUBSAMPLE="${1}"
            shift;;
    --log)
            shift
            LOG="${1}"
            shift;;
    --log-format)
            shift
            if [[ "csv json xml sub" == *"${1}"* ]]; then
                LOG_FORMAT="${1}"
            else
                echo "invalid log format"
                exit 1
            fi
            shift;;
    --model)
            shift
            MODEL="${1}"
            shift;;
    --threads)
            shift
            THREADS="${1}"
            shift;;
    -d|--debug)
            DEBUG=1
            shift;;
    --no-ssim)
            NOSSIM=1
            shift;;
    --no-ms_ssim)
            NOMSSSIM=1
            shift;;
    --no-psnr)
            NOPSNR=1
            shift;;
    --no-cambi)
            NOCAMBI=1
            shift;;
    --no-vif)
            NOVIF=1
            shift;;
    --no-adm)
            NOADM=1
            shift;;
    --no-motion2)
            NOMOTION2=1
            shift;;
    -h|--help)
            usage
            exit;;
    *)
            echo "$0: invalid option ${1}"
            echo "$0 -h for usage options"
            usage
            exit 1;;
    esac
done

# Check for tool dependencies
SELF_FULLPATH=`realpath $0`
SELF_DIR=`dirname $SELF_FULLPATH`
# Override default tool list, we only need these two
TOOLS=(ffmpeg ffprobe bc mediainfo jq base64)
# Does not depend on any other scripts
SCRIPTS=NONE
if [ ! -r $SELF_DIR/toolchecker ]; then
    echo "toolchecker not found."
    exit 1
else
    . $SELF_DIR/toolchecker
fi

if [ -z "$ENCODED" ]; then
    echo "Must supply encoded (-e/--encoded) file"
    usage
    exit 1
fi

if [ -z "$SOURCE" ]; then
    echo "Must supply source (-s/--source) file"
    usage
    exit 1
fi

## START BUILDING THE VMAF_PARAMS STRING
MI=$($MEDIAINFO --output=JSON "$SOURCE" | $BASE64)

if [ -z "$MODEL" ]; then
    WIDTH=`echo "${MI}" | $BASE64 --decode | $JQ -r '.media.track[] | select (."@type"=="Video").Width'`
	[ $DEBUG ] && echo "SOURCE WIDTH: $WIDTH"
    if [ $WIDTH -gt 1920 ]; then
        MODELFILE="vmaf_4k_v0.6.1.json"
    else
        MODELFILE="vmaf_v0.6.1.json"
    fi
    [ $DEBUG ] && echo "MODELFILE: $MODELFILE"
    if [ ! -z "$FFMPEG_PREFIX" ]; then
    	MODELPATH="${FFMPEG_PREFIX}/share/vmaf/model/${MODELFILE}"
    else
    	MODELPATH="/opt/ffmpeg5/share/vmaf/model/${MODELFILE}"
    fi
    if [ -s ${MODELPATH} ]; then
        VMAF_PARAMS="model='path=${MODELPATH}'"
        [ $DEBUG ] && echo "VMAF_PARAMS MODEL PATH: $VMAF_PARAMS"
    else
        echo "'${MODELPATH}' is not a file"
        exit 1
    fi
else
    VMAF_PARAMS="model='path=${MODEL}'"
fi

if [ -z "$SUBSAMPLE" ]; then
    FRAME_RATE=`$FFPROBE -v error -select_streams v -of default=noprint_wrappers=1:nokey=1 -show_entries stream=r_frame_rate "$SOURCE" | $BC -l`
    SUBSAMPLE=`printf "%.0f\n" "$FRAME_RATE"`
fi    
VMAF_PARAMS="${VMAF_PARAMS}:n_subsample=${SUBSAMPLE}"

if [ -z "$LOG_FORMAT" ]; then
    LOG_FORMAT="csv"
fi
VMAF_PARAMS="${VMAF_PARAMS}:log_fmt=${LOG_FORMAT}"

if [ -z "$LOG" ]; then
    LOG="$(basename "${ENCODED}" .mkv).vmaf"
fi
VMAF_PARAMS="${VMAF_PARAMS}:log_path=${LOG}"

#SSIM="feature='name=float_ssim':feature='name=ssim':ssim=1'"
SSIM="feature='name=float_ssim'"
[ ! $NOSSIM ] && VMAF_PARAMS="${VMAF_PARAMS}:$SSIM"

#MSSSIM="feature='name=float_ms_ssim':feature='name=ms_ssim':ms_ssim=1"
MSSSIM="feature='name=float_ms_ssim'"
[ ! $NOMSSSIM ] && VMAF_PARAMS="${VMAF_PARAMS}:$MSSSIM"

PSNR="feature='name=psnr':feature='name=psnr_hvs'"
[ ! $NOPSNR ] && VMAF_PARAMS="${VMAF_PARAMS}:$PSNR"

VIF="feature='name=vif'"
[ ! $NOVIF ] && VMAF_PARAMS="${VMAF_PARAMS}:$VIF"

CAMBI="feature='name=cambi'"
[ ! $NOCAMBI ] && VMAF_PARAMS="${VMAF_PARAMS}:$CAMBI"

ADM="feature='name=adm'"
[ ! $NOADM ] && VMAF_PARAMS="${VMAF_PARAMS}:$ADM"

MOTION2="feature='name=motion'"
[ ! $NOMOTION2 ] && VMAF_PARAMS="${VMAF_PARAMS}:$MOTION2"

[ $DEBUG ] && echo
[ $DEBUG ] && echo "$FFMPEG -i \"${ENCODED}\" -i \"${SOURCE}\" -map 0:v -map 1:v -map_chapters -1 -lavfi libvmaf=\"${VMAF_PARAMS}\" -f null -" && sleep 2
[ $DEBUG ] || $FFMPEG -i "${ENCODED}" -i "${SOURCE}" -map 0:v -map 1:v -map_chapters -1 -lavfi libvmaf="${VMAF_PARAMS}" -f null -

